import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.model_0_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(6,6), out_channels=32, padding=(2,2), padding_mode='zeros', stride=(2,2))
        self.model_1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_2_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_2_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_2_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_2_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_2_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_4_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_4_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_4_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_4_m_1_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_4_m_1_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_4_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_4_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_5_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_6_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_6_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_6_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_6_m_1_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_6_m_1_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_6_m_2_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_6_m_2_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_6_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_6_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_7_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=512, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_8_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_8_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_8_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_8_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_8_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_9_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_9_m = nn.MaxPool2d(ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        self.pnnx_unique_0 = nn.MaxPool2d(ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        self.pnnx_unique_1 = nn.MaxPool2d(ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        self.model_9_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=1024, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_10_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_13_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_13_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_13_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_13_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_13_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_14_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_17_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_17_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_17_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_17_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_17_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_18_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_20_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_20_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_20_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_20_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_20_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_21_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.model_23_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_23_m_0_cv1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_23_m_0_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.model_23_cv2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_23_cv3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_24_m_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=255, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_24_m_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=255, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.model_24_m_2 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=255, padding=(0,0), padding_mode='zeros', stride=(1,1))

        archive = zipfile.ZipFile('/home/stepf/world/video_algorithm_ncnn_qt/param/yolov5s.pnnx.bin', 'r')
        self.model_0_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.0.conv.bias', (32), 'float32')
        self.model_0_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.0.conv.weight', (32,3,6,6), 'float32')
        self.model_1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.1.conv.bias', (64), 'float32')
        self.model_1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.1.conv.weight', (64,32,3,3), 'float32')
        self.model_2_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv1.conv.bias', (32), 'float32')
        self.model_2_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv1.conv.weight', (32,64,1,1), 'float32')
        self.model_2_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.2.m.0.cv1.conv.bias', (32), 'float32')
        self.model_2_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.2.m.0.cv1.conv.weight', (32,32,1,1), 'float32')
        self.model_2_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.2.m.0.cv2.conv.bias', (32), 'float32')
        self.model_2_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.2.m.0.cv2.conv.weight', (32,32,3,3), 'float32')
        self.model_2_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv2.conv.bias', (32), 'float32')
        self.model_2_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv2.conv.weight', (32,64,1,1), 'float32')
        self.model_2_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv3.conv.bias', (64), 'float32')
        self.model_2_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.2.cv3.conv.weight', (64,64,1,1), 'float32')
        self.model_3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.3.conv.bias', (128), 'float32')
        self.model_3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.3.conv.weight', (128,64,3,3), 'float32')
        self.model_4_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv1.conv.bias', (64), 'float32')
        self.model_4_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv1.conv.weight', (64,128,1,1), 'float32')
        self.model_4_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.0.cv1.conv.bias', (64), 'float32')
        self.model_4_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.0.cv1.conv.weight', (64,64,1,1), 'float32')
        self.model_4_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.0.cv2.conv.bias', (64), 'float32')
        self.model_4_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.0.cv2.conv.weight', (64,64,3,3), 'float32')
        self.model_4_m_1_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.1.cv1.conv.bias', (64), 'float32')
        self.model_4_m_1_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.1.cv1.conv.weight', (64,64,1,1), 'float32')
        self.model_4_m_1_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.1.cv2.conv.bias', (64), 'float32')
        self.model_4_m_1_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.m.1.cv2.conv.weight', (64,64,3,3), 'float32')
        self.model_4_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv2.conv.bias', (64), 'float32')
        self.model_4_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv2.conv.weight', (64,128,1,1), 'float32')
        self.model_4_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv3.conv.bias', (128), 'float32')
        self.model_4_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.4.cv3.conv.weight', (128,128,1,1), 'float32')
        self.model_5_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.5.conv.bias', (256), 'float32')
        self.model_5_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.5.conv.weight', (256,128,3,3), 'float32')
        self.model_6_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv1.conv.bias', (128), 'float32')
        self.model_6_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv1.conv.weight', (128,256,1,1), 'float32')
        self.model_6_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.0.cv1.conv.bias', (128), 'float32')
        self.model_6_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.0.cv1.conv.weight', (128,128,1,1), 'float32')
        self.model_6_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.0.cv2.conv.bias', (128), 'float32')
        self.model_6_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.0.cv2.conv.weight', (128,128,3,3), 'float32')
        self.model_6_m_1_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.1.cv1.conv.bias', (128), 'float32')
        self.model_6_m_1_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.1.cv1.conv.weight', (128,128,1,1), 'float32')
        self.model_6_m_1_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.1.cv2.conv.bias', (128), 'float32')
        self.model_6_m_1_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.1.cv2.conv.weight', (128,128,3,3), 'float32')
        self.model_6_m_2_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.2.cv1.conv.bias', (128), 'float32')
        self.model_6_m_2_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.2.cv1.conv.weight', (128,128,1,1), 'float32')
        self.model_6_m_2_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.2.cv2.conv.bias', (128), 'float32')
        self.model_6_m_2_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.m.2.cv2.conv.weight', (128,128,3,3), 'float32')
        self.model_6_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv2.conv.bias', (128), 'float32')
        self.model_6_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv2.conv.weight', (128,256,1,1), 'float32')
        self.model_6_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv3.conv.bias', (256), 'float32')
        self.model_6_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.6.cv3.conv.weight', (256,256,1,1), 'float32')
        self.model_7_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.7.conv.bias', (512), 'float32')
        self.model_7_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.7.conv.weight', (512,256,3,3), 'float32')
        self.model_8_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv1.conv.bias', (256), 'float32')
        self.model_8_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv1.conv.weight', (256,512,1,1), 'float32')
        self.model_8_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.8.m.0.cv1.conv.bias', (256), 'float32')
        self.model_8_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.8.m.0.cv1.conv.weight', (256,256,1,1), 'float32')
        self.model_8_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.8.m.0.cv2.conv.bias', (256), 'float32')
        self.model_8_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.8.m.0.cv2.conv.weight', (256,256,3,3), 'float32')
        self.model_8_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv2.conv.bias', (256), 'float32')
        self.model_8_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv2.conv.weight', (256,512,1,1), 'float32')
        self.model_8_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv3.conv.bias', (512), 'float32')
        self.model_8_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.8.cv3.conv.weight', (512,512,1,1), 'float32')
        self.model_9_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.9.cv1.conv.bias', (256), 'float32')
        self.model_9_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.9.cv1.conv.weight', (256,512,1,1), 'float32')
        self.model_9_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.9.cv2.conv.bias', (512), 'float32')
        self.model_9_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.9.cv2.conv.weight', (512,1024,1,1), 'float32')
        self.model_10_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.10.conv.bias', (256), 'float32')
        self.model_10_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.10.conv.weight', (256,512,1,1), 'float32')
        self.model_13_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv1.conv.bias', (128), 'float32')
        self.model_13_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv1.conv.weight', (128,512,1,1), 'float32')
        self.model_13_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.13.m.0.cv1.conv.bias', (128), 'float32')
        self.model_13_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.13.m.0.cv1.conv.weight', (128,128,1,1), 'float32')
        self.model_13_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.13.m.0.cv2.conv.bias', (128), 'float32')
        self.model_13_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.13.m.0.cv2.conv.weight', (128,128,3,3), 'float32')
        self.model_13_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv2.conv.bias', (128), 'float32')
        self.model_13_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv2.conv.weight', (128,512,1,1), 'float32')
        self.model_13_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv3.conv.bias', (256), 'float32')
        self.model_13_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.13.cv3.conv.weight', (256,256,1,1), 'float32')
        self.model_14_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.14.conv.bias', (128), 'float32')
        self.model_14_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.14.conv.weight', (128,256,1,1), 'float32')
        self.model_17_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv1.conv.bias', (64), 'float32')
        self.model_17_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv1.conv.weight', (64,256,1,1), 'float32')
        self.model_17_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.17.m.0.cv1.conv.bias', (64), 'float32')
        self.model_17_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.17.m.0.cv1.conv.weight', (64,64,1,1), 'float32')
        self.model_17_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.17.m.0.cv2.conv.bias', (64), 'float32')
        self.model_17_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.17.m.0.cv2.conv.weight', (64,64,3,3), 'float32')
        self.model_17_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv2.conv.bias', (64), 'float32')
        self.model_17_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv2.conv.weight', (64,256,1,1), 'float32')
        self.model_17_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv3.conv.bias', (128), 'float32')
        self.model_17_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.17.cv3.conv.weight', (128,128,1,1), 'float32')
        self.model_18_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.18.conv.bias', (128), 'float32')
        self.model_18_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.18.conv.weight', (128,128,3,3), 'float32')
        self.model_20_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv1.conv.bias', (128), 'float32')
        self.model_20_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv1.conv.weight', (128,256,1,1), 'float32')
        self.model_20_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.20.m.0.cv1.conv.bias', (128), 'float32')
        self.model_20_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.20.m.0.cv1.conv.weight', (128,128,1,1), 'float32')
        self.model_20_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.20.m.0.cv2.conv.bias', (128), 'float32')
        self.model_20_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.20.m.0.cv2.conv.weight', (128,128,3,3), 'float32')
        self.model_20_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv2.conv.bias', (128), 'float32')
        self.model_20_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv2.conv.weight', (128,256,1,1), 'float32')
        self.model_20_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv3.conv.bias', (256), 'float32')
        self.model_20_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.20.cv3.conv.weight', (256,256,1,1), 'float32')
        self.model_21_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.21.conv.bias', (256), 'float32')
        self.model_21_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.21.conv.weight', (256,256,3,3), 'float32')
        self.model_23_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv1.conv.bias', (256), 'float32')
        self.model_23_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv1.conv.weight', (256,512,1,1), 'float32')
        self.model_23_m_0_cv1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.23.m.0.cv1.conv.bias', (256), 'float32')
        self.model_23_m_0_cv1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.23.m.0.cv1.conv.weight', (256,256,1,1), 'float32')
        self.model_23_m_0_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.23.m.0.cv2.conv.bias', (256), 'float32')
        self.model_23_m_0_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.23.m.0.cv2.conv.weight', (256,256,3,3), 'float32')
        self.model_23_cv2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv2.conv.bias', (256), 'float32')
        self.model_23_cv2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv2.conv.weight', (256,512,1,1), 'float32')
        self.model_23_cv3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv3.conv.bias', (512), 'float32')
        self.model_23_cv3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'model.23.cv3.conv.weight', (512,512,1,1), 'float32')
        self.model_24_m_0.bias = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.0.bias', (255), 'float32')
        self.model_24_m_0.weight = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.0.weight', (255,128,1,1), 'float32')
        self.model_24_m_1.bias = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.1.bias', (255), 'float32')
        self.model_24_m_1.weight = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.1.weight', (255,256,1,1), 'float32')
        self.model_24_m_2.bias = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.2.bias', (255), 'float32')
        self.model_24_m_2.weight = self.load_pnnx_bin_as_parameter(archive, 'model.24.m.2.weight', (255,512,1,1), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        _, tmppath = tempfile.mkstemp()
        tmpf = open(tmppath, 'wb')
        with archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        tmpf.close()
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0):
        v_1 = self.model_0_conv(v_0)
        v_2 = F.silu(input=v_1)
        v_3 = self.model_1_conv(v_2)
        v_4 = F.silu(input=v_3)
        v_5 = self.model_2_cv1_conv(v_4)
        v_6 = F.silu(input=v_5)
        v_7 = self.model_2_m_0_cv1_conv(v_6)
        v_8 = F.silu(input=v_7)
        v_9 = self.model_2_m_0_cv2_conv(v_8)
        v_10 = F.silu(input=v_9)
        v_11 = (v_6 + v_10)
        v_12 = self.model_2_cv2_conv(v_4)
        v_13 = F.silu(input=v_12)
        v_14 = torch.cat((v_11, v_13), dim=1)
        v_15 = self.model_2_cv3_conv(v_14)
        v_16 = F.silu(input=v_15)
        v_17 = self.model_3_conv(v_16)
        v_18 = F.silu(input=v_17)
        v_19 = self.model_4_cv1_conv(v_18)
        v_20 = F.silu(input=v_19)
        v_21 = self.model_4_m_0_cv1_conv(v_20)
        v_22 = F.silu(input=v_21)
        v_23 = self.model_4_m_0_cv2_conv(v_22)
        v_24 = F.silu(input=v_23)
        v_25 = (v_20 + v_24)
        v_26 = self.model_4_m_1_cv1_conv(v_25)
        v_27 = F.silu(input=v_26)
        v_28 = self.model_4_m_1_cv2_conv(v_27)
        v_29 = F.silu(input=v_28)
        v_30 = (v_25 + v_29)
        v_31 = self.model_4_cv2_conv(v_18)
        v_32 = F.silu(input=v_31)
        v_33 = torch.cat((v_30, v_32), dim=1)
        v_34 = self.model_4_cv3_conv(v_33)
        v_35 = F.silu(input=v_34)
        v_36 = self.model_5_conv(v_35)
        v_37 = F.silu(input=v_36)
        v_38 = self.model_6_cv1_conv(v_37)
        v_39 = F.silu(input=v_38)
        v_40 = self.model_6_m_0_cv1_conv(v_39)
        v_41 = F.silu(input=v_40)
        v_42 = self.model_6_m_0_cv2_conv(v_41)
        v_43 = F.silu(input=v_42)
        v_44 = (v_39 + v_43)
        v_45 = self.model_6_m_1_cv1_conv(v_44)
        v_46 = F.silu(input=v_45)
        v_47 = self.model_6_m_1_cv2_conv(v_46)
        v_48 = F.silu(input=v_47)
        v_49 = (v_44 + v_48)
        v_50 = self.model_6_m_2_cv1_conv(v_49)
        v_51 = F.silu(input=v_50)
        v_52 = self.model_6_m_2_cv2_conv(v_51)
        v_53 = F.silu(input=v_52)
        v_54 = (v_49 + v_53)
        v_55 = self.model_6_cv2_conv(v_37)
        v_56 = F.silu(input=v_55)
        v_57 = torch.cat((v_54, v_56), dim=1)
        v_58 = self.model_6_cv3_conv(v_57)
        v_59 = F.silu(input=v_58)
        v_60 = self.model_7_conv(v_59)
        v_61 = F.silu(input=v_60)
        v_62 = self.model_8_cv1_conv(v_61)
        v_63 = F.silu(input=v_62)
        v_64 = self.model_8_m_0_cv1_conv(v_63)
        v_65 = F.silu(input=v_64)
        v_66 = self.model_8_m_0_cv2_conv(v_65)
        v_67 = F.silu(input=v_66)
        v_68 = (v_63 + v_67)
        v_69 = self.model_8_cv2_conv(v_61)
        v_70 = F.silu(input=v_69)
        v_71 = torch.cat((v_68, v_70), dim=1)
        v_72 = self.model_8_cv3_conv(v_71)
        v_73 = F.silu(input=v_72)
        v_74 = self.model_9_cv1_conv(v_73)
        v_75 = F.silu(input=v_74)
        v_76 = self.model_9_m(v_75)
        v_77 = self.pnnx_unique_0(v_76)
        v_78 = self.pnnx_unique_1(v_77)
        v_79 = torch.cat((v_75, v_76, v_77, v_78), dim=1)
        v_80 = self.model_9_cv2_conv(v_79)
        v_81 = F.silu(input=v_80)
        v_82 = self.model_10_conv(v_81)
        v_83 = F.silu(input=v_82)
        v_84 = torch.cat((v_83, v_59), dim=1)
        v_85 = self.model_13_cv1_conv(v_84)
        v_86 = F.silu(input=v_85)
        v_87 = self.model_13_m_0_cv1_conv(v_86)
        v_88 = F.silu(input=v_87)
        v_89 = self.model_13_m_0_cv2_conv(v_88)
        v_90 = self.model_13_cv2_conv(v_84)
        v_91 = F.silu(input=v_90)
        v_92 = F.silu(input=v_89)
        v_93 = torch.cat((v_92, v_91), dim=1)
        v_94 = self.model_13_cv3_conv(v_93)
        v_95 = F.silu(input=v_94)
        v_96 = self.model_14_conv(v_95)
        v_97 = F.silu(input=v_96)
        v_98 = torch.cat((v_97, v_35), dim=1)
        v_99 = self.model_17_cv1_conv(v_98)
        v_100 = F.silu(input=v_99)
        v_101 = self.model_17_m_0_cv1_conv(v_100)
        v_102 = F.silu(input=v_101)
        v_103 = self.model_17_m_0_cv2_conv(v_102)
        v_104 = self.model_17_cv2_conv(v_98)
        v_105 = F.silu(input=v_104)
        v_106 = F.silu(input=v_103)
        v_107 = torch.cat((v_106, v_105), dim=1)
        v_108 = self.model_17_cv3_conv(v_107)
        v_109 = F.silu(input=v_108)
        v_110 = self.model_18_conv(v_109)
        v_111 = F.silu(input=v_110)
        v_112 = torch.cat((v_111, v_97), dim=1)
        v_113 = self.model_20_cv1_conv(v_112)
        v_114 = F.silu(input=v_113)
        v_115 = self.model_20_m_0_cv1_conv(v_114)
        v_116 = F.silu(input=v_115)
        v_117 = self.model_20_m_0_cv2_conv(v_116)
        v_118 = self.model_20_cv2_conv(v_112)
        v_119 = F.silu(input=v_118)
        v_120 = F.silu(input=v_117)
        v_121 = torch.cat((v_120, v_119), dim=1)
        v_122 = self.model_20_cv3_conv(v_121)
        v_123 = F.silu(input=v_122)
        v_124 = self.model_21_conv(v_123)
        v_125 = F.silu(input=v_124)
        v_126 = torch.cat((v_125, v_83), dim=1)
        v_127 = self.model_23_cv1_conv(v_126)
        v_128 = F.silu(input=v_127)
        v_129 = self.model_23_m_0_cv1_conv(v_128)
        v_130 = F.silu(input=v_129)
        v_131 = self.model_23_m_0_cv2_conv(v_130)
        v_132 = self.model_23_cv2_conv(v_126)
        v_133 = F.silu(input=v_132)
        v_134 = F.silu(input=v_131)
        v_135 = torch.cat((v_134, v_133), dim=1)
        v_136 = self.model_23_cv3_conv(v_135)
        v_137 = self.model_24_m_0(v_109)
        v_138 = v_137.view(1, 3, 85, -1, -1)
        v_139 = self.model_24_m_1(v_123)
        v_140 = v_139.view(1, 3, 85, -1, -1)
        v_141 = F.silu(input=v_136)
        v_142 = self.model_24_m_2(v_141)
        v_143 = v_142.view(1, 3, 85, -1, -1)
        v_144 = torch.permute(input=v_143, dims=(0,1,3,4,2))
        v_145 = v_144.contiguous(memory_format=torch.contiguous_format)
        v_146 = torch.permute(input=v_140, dims=(0,1,3,4,2))
        v_147 = v_146.contiguous(memory_format=torch.contiguous_format)
        v_148 = torch.permute(input=v_138, dims=(0,1,3,4,2))
        v_149 = v_148.contiguous(memory_format=torch.contiguous_format)
        v_150 = [v_149, v_147, v_145]
        return v_150

def export_torchscript():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, -1, -1, dtype=torch.float)

    mod = torch.jit.trace(net, v_0)
    mod.save("/home/stepf/world/video_algorithm_ncnn_qt/param/yolov5s_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, -1, -1, dtype=torch.float)

    torch.onnx._export(net, v_0, "/home/stepf/world/video_algorithm_ncnn_qt/param/yolov5s_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0'], output_names=['out0'])

def test_inference():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, -1, -1, dtype=torch.float)

    return net(v_0)
